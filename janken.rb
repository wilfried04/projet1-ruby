# Ecrivez la logique pour que le joueur (vous-même) entre "0 ~ 2".
class Player
    def hand
      # Afficher "Phrases qui obligent le joueur à entrer 0 - 2".
      puts "Please enter a number."
      puts "0 : Rock", "1 : Paper", "2: Scissors"
      # Get and assign the player's input to the "input_hand" variable.

      input_hand = gets.to_i
        # Tip! Use the "gets method
      # input_hand =.

      while input_hand != 0 && input_hand != 1 && input_hand != 2 && input_hand == ""
        puts "Please enter a number [0 , 1, 2]"
        input_hand = gets.to_i
      end
      while true
        if input_hand == 0
          return input_hand
        elsif input_hand == 1
          return input_hand
        elsif input_hand == 2
            return input_hand
        else
          puts "Enter a number again [0, 1 ,2]"
          puts "0: Rock, 1: Paper, 2: Scissors"
          input_hand = gets.to_i
        end

        player_hand = input_hand

      end 
      # If "input_hand" (the value you get) is one of "0, 1, or 2", get out of the while, otherwise make it repeat from the beginning.
        # Hint! Use "while" and "if
        # Follow the following type examples to implement them * Be careful not to comment out when implementing them!
        # while true
          # Write the condition (if "input_hand" (the value you get) is one of "0, 1 or 2")
            # Return "input_hand" (the value you get) as is.
              # Hint! Use "return".
          # else *Except for conditions.
            # puts "A sentence that forces the player to enter 0 ~ 2
            # puts "Please enter the number again."
            # puts "0:goo, 1:choki, 2:par."
            # get and assign the player's input to the "input_hand" variable.
          # end end of the if statement.
        # end end of a while statement
        return player_hand
    end 
   
  end
  # Ecrire la logique pour que l'ennemi génère aléatoirement une valeur de "0 ~ 2".
  class Enemy
    def hand
      # produire aléatoirement des valeurs goo, choki et par.
      
      input_enemy_hand = Random.new()
      enemy_hand = input_enemy_hand.rand(3)

      return enemy_hand
    end
    
  end
  # Ecrire la logique pour jouer pierre-papier-ciseaux entre "0 ~ 2" entré par le joueur (vous) et "0 ~ 2" généré aléatoirement par l'ennemi, et sortir le résultat sur la console.
  class Janken

    def pon(player_hand, enemy_hand)
      # Assignez ["goo", "choki", "par"] à la variable "janken".
      janken = ["Rock", "Paper", "Scissors"]
      # "The opponent's move is #{value generated by the enemy}. Outputs "The opponent's hand is #{janken[enemy_hand]}
      # puts "The opponent's hand is #{janken[enemy_hand]}."
      puts "The Opponent's hand is #{janken[enemy_hand]}"
      
      puts "Your hand is #{janken[player_hand]}"
      # Create the logic for rock-paper-scissors from the return value of the Player class and the return value of the Enemy class.
        # Follow the following example types to implement it * Be careful not to comment out when you implement it.
        # If the return value of the Player class (player_hand) is the same as the return value of the Enemy class (enemy_hand)
        if janken[player_hand] == janken[enemy_hand]
            puts "You're equal"
            puts "Try"
            return true
            
          elsif(player_hand == 0 && enemy_hand == 1) || (player_hand == 1 && enemy_hand == 2) || (player_hand == 2 && enemy_hand == 0)
               # player_hand = (janken[player_hand] - janken[enemy_hand])
               # player_hand = ((player_hand.abs) + 3) % 3
               # puts "#{player_hand}"
                #Comme je n'arrivais à pas déclarer la variable j'ai donc mis le résultat dans Player Hand 
                #ce qui n'est pas une bonne chose
           #player_hand == 2
           # puts "You hand is #{player_hand} and Enemy hand is #{enemy_hand}"
            puts "You Win, congrats"
            return false
          elsif (player_hand == 0 && enemy_hand == 2) || (player_hand == 1 && enemy_hand == 0) || (player_hand == 2 && enemy_hand == 1)
            # player_hand == 1 
           # puts "You hand is #{player_hand} and Enemy hand is #{enemy_hand}"
            puts "You Lose"
            return false
          end 
        # puts "feline"
        # puts "Aiko"
        # Return "true" and let the rock-paper-scissors run repeatedly.
          # Hint! Use "return".
      # elsif If it is a combination of the following.
        # (player_hand == 0 && enemy_hand == 1) || (player_hand == 1 && enemy_hand == 2) || (player_hand == 2 && enemy_hand == 0)
        # Output "You win
        # Return "false" to end the while and end the rock-paper-scissors game.
      # else * Other than under the conditions.
        # Output "You lose
        # End rock-paper-scissors by returning "false" to end the while.
      # end end of if statement.
    end
  end
  # Assign the Player instance to the "player" variable.
  player = Player.new
  # Substitute the variable "enemy" with an instance of Enemy.
  enemy = Enemy.new
  # Substitute the variable "janken" with the instantiation of Janken.
  janken = Janken.new
  
  # Assign "true" to the "next_game" variable. The reason for this is that unless "next_game" becomes "false", we will repeat the process forever while.
  # Let's implement the following type examples * Be careful not to comment out when implementing them.
  # while next_game  
  
  # Assign the value returned from the game of rock-paper-scissors (return value) to the "next_game" variable.
  # The game of rock-paper-scissors is executed with "janken.pon(player.hand, enemy.hand)
  next_game = true

  while next_game
    next_game = janken.pon(player.hand, enemy.hand)
  end




  
   
  # If the result of the rock-paper-scissors game returns "false", this while will end. If "true" is returned, continue repeating the statement as many times as it returns.
  # end end of a while statement.
